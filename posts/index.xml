<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Posts on Annahri Ngelinux</title>
    <link>https://blog.annahri.com/posts/</link>
    <description>Recent content in Posts on Annahri Ngelinux</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>id-id</language>
    <lastBuildDate>Thu, 22 Sep 2022 21:59:32 +0700</lastBuildDate><atom:link href="https://blog.annahri.com/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Jurnal: Menyelamatkan Partisi LVM Yang Metadatanya Tertimpa</title>
      <link>https://blog.annahri.com/posts/jurnal-menyelamatkan-partisi-lvm-yang-rusak/</link>
      <pubDate>Thu, 22 Sep 2022 21:59:32 +0700</pubDate>
      
      <guid>https://blog.annahri.com/posts/jurnal-menyelamatkan-partisi-lvm-yang-rusak/</guid>
      <description>Mukadimah Pada artikel ini, saya akan menceritakan bagaimana saya berhasil menyelamankan dan mengembalikan paritisi LVM yang hilang metadatanya karena tertimpa oleh metadata SWAP.
Hal ini terjadi diduga karena sang &amp;ldquo;user&amp;rdquo; nampaknya ingin membesar kapasitas RAM dengan menambah ukuran SWAP. Alih-alih membuatnya pada suatu file atau partisi baru, si &amp;ldquo;user&amp;rdquo; tersebut membuatnya di partisi dimana root disk berada.
Sejurus kemudian, muncullah permintaan reboot VM yang dimaksud. Tanpa pikir panjang, rekan saya melakukan reboot.</description>
    </item>
    
    <item>
      <title>Belajar Bash Scripting: Arguments</title>
      <link>https://blog.annahri.com/posts/belajar-bash-scripting-arguments/</link>
      <pubDate>Sat, 30 Jul 2022 21:38:09 +0700</pubDate>
      
      <guid>https://blog.annahri.com/posts/belajar-bash-scripting-arguments/</guid>
      <description>Pada artikel kali ini, saya akan membahas mengenai shell argumens, yaitu bagaimana agar kita dapat memasukkan parameter tertentu saat memanggil script yang telah kita tulis atau saat memanggul fungsi yang telah kita definisikan.
Parameter/argumen Mari kita lihat pada command cp berikut ini:
cp -f file1 file2 Command diatas bisa diartikan dengan &amp;ldquo;menyalin secara paksa file1 sebagai file2&amp;rdquo;.
Paksaan yang dimaksud adalah jika file2 sebelumnya telah ada, maka langsung menimpa file2 tersebut dengan file1tanpa memberitahu user terlebih dahulu.</description>
    </item>
    
    <item>
      <title>Belajar Bash Scripting: Functions</title>
      <link>https://blog.annahri.com/posts/belajar-bash-scripting-functions/</link>
      <pubDate>Sun, 29 May 2022 08:09:00 +0700</pubDate>
      
      <guid>https://blog.annahri.com/posts/belajar-bash-scripting-functions/</guid>
      <description>Pada artikel ini saya akan menjelaskan seputar shell functions, bagaimana cara mendefinisikan suatu fungsi pada Bash shell yang itu merupakan seperangkat perintah yang disusun sedemikian rupa agar bisa digunakan kembali pada bagian lain suatu script.
Struktur dasar Sebuah fungsi dapat didefinisikan dengan susunan sebagai berikut:
nama_fungsi() { ... command1 command2 ... } # atau function nama_fungsi() { ... } Kedua bentuk diatas tidak memiliki perbedaan, namun sebagian ahli mengatakan bahwa bentuk kedua tidaklah portabel.</description>
    </item>
    
    <item>
      <title>Belajar Bash Scripting: Menulis Script</title>
      <link>https://blog.annahri.com/posts/belajar-bash-scripting-menulis-script/</link>
      <pubDate>Sat, 28 May 2022 16:25:00 +0700</pubDate>
      
      <guid>https://blog.annahri.com/posts/belajar-bash-scripting-menulis-script/</guid>
      <description>Setelah mempelajari mengenai elemen-elemen dasar pada suatu script, kali ini saya akan menjelaskan bagaimana membuat file script.
Jika Anda ingin mempelajari ulang mengenai elemen-elemen yang dimaksud, bisa Anda pelajari melalui tautan-tautan dibawah ini:
Konsep dasar Shell Variables Konsep dasar Shell Conditionals Konsep dasar Shell Loops Konsep dasar Shell Functions Pada dasarnya, shell script merupakan file yang berisi serangkaian instruksi shell yang disusun sedemikian rupa untuk tujuan tertentu.
Diantara tujuan tersebut dapat berupa instruksi otomasi proses, CLI (command line interface) tool, program wrapper sebagai ekstensi suatu program lain yang sudah ada, dan semisalnya.</description>
    </item>
    
    <item>
      <title>Jurnal: Zimbra - Mencari Tahu Konfigurasi Filter Untuk Semua Akun</title>
      <link>https://blog.annahri.com/posts/jurnal-zimbra-mencari-tahu-konfigurasi-filter-untuk-semua-akun/</link>
      <pubDate>Sun, 22 May 2022 21:39:00 +0700</pubDate>
      
      <guid>https://blog.annahri.com/posts/jurnal-zimbra-mencari-tahu-konfigurasi-filter-untuk-semua-akun/</guid>
      <description>Ini adalah artikel ringkas yang membahas tentang cara untuk mencari tahu seluruh konfigurasi filter yang diatur oleh tiap akun email.
Pada dasarnya, perintah yang digunakan adalah:
zmprov -l ga &amp;lt;nama akun&amp;gt; zimbraMailSieveScript Contoh output:
# name user1@example.com zimbraMailSieveScript: require [&amp;#34;fileinto&amp;#34;, &amp;#34;copy&amp;#34;, &amp;#34;reject&amp;#34;, &amp;#34;tag&amp;#34;, &amp;#34;flag&amp;#34;, &amp;#34;variables&amp;#34;, &amp;#34;log&amp;#34;, &amp;#34;enotify&amp;#34;, &amp;#34;envelope&amp;#34;, &amp;#34;body&amp;#34;, &amp;#34;ereject&amp;#34;, &amp;#34;reject&amp;#34;, &amp;#34;relational&amp;#34;, &amp;#34;comparator-i;ascii- numeric&amp;#34;]; # forward if anyof (address :all :contains :comparator &amp;#34;i;ascii-casemap&amp;#34; [&amp;#34;to&amp;#34;] &amp;#34;user1@example.com&amp;#34;) { redirect &amp;#34;user2@example.com&amp;#34;; stop; } Sehingga, untuk meng-query keseluruhan akun, bisa menggunakan loop atau xargs:</description>
    </item>
    
    <item>
      <title>Belajar Bash Scripting: Loop</title>
      <link>https://blog.annahri.com/posts/belajar-bash-scripting-loop/</link>
      <pubDate>Sun, 08 May 2022 14:21:00 +0700</pubDate>
      
      <guid>https://blog.annahri.com/posts/belajar-bash-scripting-loop/</guid>
      <description>Artikel ini akan menjelaskan mengenai bagaimana cara untuk melakukan LOOP alias menjalankan sekumpulan command secara berulang-ulang dengan kondisi tertentu.
FOR loop FOR loop pada shell Bash sifatnya sama seperti foreach pada keumuman bahasa pemrograman. Yaitu melakukan perulangan tanpa adanya counter, alias suatu perulangan tidaklah diketahui ke-berapa perulangan tersebut sedang terjadi. Atau sederhananya tidak ada indeks pada setiap perulangan.
Namun dengan pengecualian jika FOR loop tersebut dideklarasikan menggunakan indeks. Akan tiba contohnya pada penjelasan di bawah.</description>
    </item>
    
    <item>
      <title>Jurnal: Script Rincian Mail Queue Postfix</title>
      <link>https://blog.annahri.com/posts/jurnal-script-rincian-mail-queue-postfix/</link>
      <pubDate>Fri, 08 Apr 2022 09:25:02 +0700</pubDate>
      
      <guid>https://blog.annahri.com/posts/jurnal-script-rincian-mail-queue-postfix/</guid>
      <description>Pada artikel ini saya akan memberikan contoh script Bash dan Python yang berfungsi untuk menampilkan jumlah antrian email (mail queue) keluar pada Postfix. Ini berguna sebagai metrics yang bisa digunakan untuk alerting. Baik alerting manual maupun terintegrasi seperti ServerDensity, dan sebagainya.
Dasar Script Komponen utama utama untuk mengetahui mail queue adalah folder dimana queue tersebut singgah untuk sementara waktu. Untuk mengetahuinya, kita bisa memanggil command postconf -h queue_directory yang outputnya akan menunjukkan dimana direktori tersebut.</description>
    </item>
    
    <item>
      <title>Belajar Bash Scripting: Variabel (Update)</title>
      <link>https://blog.annahri.com/posts/belajar-bash-scripting-variabel/</link>
      <pubDate>Mon, 28 Feb 2022 13:21:57 +0700</pubDate>
      
      <guid>https://blog.annahri.com/posts/belajar-bash-scripting-variabel/</guid>
      <description>Pada artikel ini, saya akan menjelaskan bagaimana cara membuat variabel, array, dan lain-lain yang berkaitan, pada shell Bash.
Seperti yang sudah pernah dibahas pada artikel Belajar Bash Scripting lain, bahwa tentunya Bash Scripting yang dibahas ini tidaklah POSIX-compliant atau istilahnya Bashism.
Aturan penamaan Dalam membuat variabel atau array, ketentuan dalam pemberian nama adalah sebagai berikut:
Tidak diawali dengan angka. Tidak mengandung tanda pentung, tanda @, tanda pagar # dan asterisk (*).</description>
    </item>
    
    <item>
      <title>Belajar Bash Scripting: Conditional</title>
      <link>https://blog.annahri.com/posts/belajar-bash-scripting-conditional/</link>
      <pubDate>Sun, 27 Feb 2022 20:41:25 +0700</pubDate>
      
      <guid>https://blog.annahri.com/posts/belajar-bash-scripting-conditional/</guid>
      <description>Pada artikel ini saya akan menjelaskan mengenai bagaimana cara melakukan macam-macam kondisional pada Bash scripting. Dan karena ini adalah seri khusus shell Bash, maka tentunya tidak POSIX-compliant.
Kondisional IF Struktur dasar Struktur dasar kondisional if dalam Bash scripting hampir sama dengan keumuman bahasa pemrograman, yaitu seperti dibawah ini:
if kondisi; then command command ... fi # atau if kondisi then command command ... fi Kondisi yang disebutkan diatas bisa berupa ekspresi perbandingan seperti contoh berikut:</description>
    </item>
    
    <item>
      <title>Jurnal: Membenahi kendala mixed-content pada Nginx Reverse-Proxy</title>
      <link>https://blog.annahri.com/posts/jurnal-nginx-reverse-proxy-mixed-content/</link>
      <pubDate>Sat, 13 Nov 2021 22:09:50 +0000</pubDate>
      
      <guid>https://blog.annahri.com/posts/jurnal-nginx-reverse-proxy-mixed-content/</guid>
      <description>Sekedar dokumentasi dari permasalahan yang pernah saya jumpai. Terkadang dari sisi aplikasi tidak siap untuk dipublikasi secara HTTPS karena di dalam source code-nya masih ter-hardcoded beberapa resource eksternal menggunakan protokol HTTP.
Hal ini membuat kebanyakan web browser mengeluh dan enggan untuk memuat resource yang dipanggil dari protokol HTTP tadi.
Maka solusinya ada 2:
Edit source code-nya, ganti semua kode yang memanggil resource dari HTTP menjadi HTTPS. Dari sisi Reverse-Proxy, tinggal tambahkan header berikut: add_header &amp;#39;Content-Security-Policy&amp;#39; &amp;#39;upgrade-insecure-requests&amp;#39;; Kali ini saya akan membahas solusi untuk Reverse-Proxy Nginx</description>
    </item>
    
    <item>
      <title>Trik Bash Shell #1</title>
      <link>https://blog.annahri.com/posts/trik-bash-shell-1/</link>
      <pubDate>Thu, 04 Nov 2021 23:28:21 +0000</pubDate>
      
      <guid>https://blog.annahri.com/posts/trik-bash-shell-1/</guid>
      <description>Saya akan menjelaskan beberapa tips dan trik dalam menggunakan shell bash yang biasa saya gunakan sehari-hari.
Reverse Search Sebagian orang biasa menggunakan history untuk melihat/mencari command-command sebelumnya yang sudah pernah diinputkan. Atau bahkan menggunakan arrow key atas untuk mencari command yang diinginkan.
Sebenarnya hampir kebanyakan shell memiliki fitur reverse search. Sesuai namanya, fitur ini bisa melakukan pencarian terhadap command yang sebelumya pernah diinputkan.
Bagaimana caranya? Cukup menekan CTRL+R pada terminal.</description>
    </item>
    
    <item>
      <title>Jurnal: Cara Extend VM Disk untuk LVM</title>
      <link>https://blog.annahri.com/posts/jurnal-cara-extend-vm-disk-lvm/</link>
      <pubDate>Tue, 02 Nov 2021 18:58:41 +0000</pubDate>
      
      <guid>https://blog.annahri.com/posts/jurnal-cara-extend-vm-disk-lvm/</guid>
      <description>Saya akan menjelaskan cara mudah untuk resize disk suatu VM dengan konfigurasi LVM. Asumsinya, disk sudah diextend dari sisi HVnya (PVE, ESXi, dll).
Pastikan penambahan space sudah terdeteksi dari VM melalui dmesg dan Anda akan mendapati informasi seperti ini:
[262733.527587] sd 0:0:2:0: [abc] 4096-byte physical blocks [262733.528263] abc: detected capacity change from 214748364800 to 429496729600 Kalau ternyata belum terdeteksi, bisa dicoba untuk menjalankan perintah ini
echo 1 &amp;gt; /sys/class/block/&amp;lt;disk&amp;gt;/device/rescan Lalu coba cek kembali di dmesg.</description>
    </item>
    
    <item>
      <title>Instalasi LEMP Stack (Linux, Nginx, MariaDB, PHP) pada Ubuntu 20.04</title>
      <link>https://blog.annahri.com/posts/lemp-stack-ubuntu20-04-focal/</link>
      <pubDate>Thu, 27 May 2021 00:00:00 +0700</pubDate>
      
      <guid>https://blog.annahri.com/posts/lemp-stack-ubuntu20-04-focal/</guid>
      <description>LEMP stack adalah software stack yang terdiri dari (L)inux, (E)gin-x alias Nginx, (M)ysql atau Mariadb, dan (P)HP.
Di sini, saya akan menjelaskan bagaimana cara instalasi LEMP stack pada Ubuntu 20.04. Untuk OS berbasis RPM menyusul.
Konfigurasi Awal Pastikan repositori Anda sudah pada kondisi terbaru dan package pada sistem anda terupgrade.
$ sudo apt update &amp;amp;&amp;amp; sudo apt upgrade -y Jika menggunakan firewall, pastikan port 80 (HTTP) dan 443 (HTTPS) terbuka.</description>
    </item>
    
  </channel>
</rss>
